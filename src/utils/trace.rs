
use std::collections::HashSet;

use crate::entity::errors::SovesError;
use alloy::hex::ToHexExt;
use alloy::providers::RootProvider;
use alloy::transports::Transport;
use alloy::{
    primitives::TxHash,
    providers::ext::DebugApi,
    rpc::types::trace::geth::{
        CallConfig, CallFrame, GethDebugBuiltInTracerType, GethDebugTracerType,
        GethDebugTracingOptions, GethDefaultTracingOptions,
    },
};

pub async fn get_trace_for_hash<T>(
    provider: &RootProvider<T>,
    tx_hash: TxHash,
) -> Result<CallFrame, SovesError>
where
    T: Transport + Clone,
{
    // Trace with built-in call tracer.
    let trace_options = GethDebugTracingOptions {
        config: GethDefaultTracingOptions {
            ..Default::default()
        },
        tracer: Some(GethDebugTracerType::BuiltInTracer(
            GethDebugBuiltInTracerType::CallTracer,
        )),
        tracer_config: serde_json::to_value(CallConfig {
            only_top_call: Some(false),
            with_log: Some(true),
        })
        .unwrap()
        .into(),
        ..Default::default()
    };
    let trace = provider
        .debug_trace_transaction(tx_hash, trace_options)
        .await
        .map_err(|e| {
            SovesError::ProviderError(format!(
                "failed to get trace for txn hash: {}, err: {}",
                tx_hash,
                e.to_string()
            ))
        })?
        .try_into_call_frame()
        .map_err(|e| {
            SovesError::ProviderError(format!(
                "failed to parse trace into callframe, err: {}",
                e.to_string()
            ))
        })?;

    Ok(trace)
}

pub fn get_selectors_for_trace(trace: &CallFrame) -> Vec<String> {
    get_selectors_set_for_trace(trace).into_iter().collect()
}

fn get_selectors_set_for_trace(trace: &CallFrame) -> HashSet<String> {
    let mut selectors: HashSet<String> = HashSet::new();
    
    if trace.input.len() < 4 {
        return selectors;
    }
    // Get the first 4 bytes of input (function selector)
    let slice = trace.input.slice(..4);
    selectors.insert(slice.encode_hex_with_prefix());

    // Recursively collect selectors from child calls
    for child_trace in &trace.calls {
        let s: HashSet<String> = get_selectors_set_for_trace(child_trace);
        println!("{:?}", s);
        selectors.extend(get_selectors_set_for_trace(child_trace));
    }

    selectors
}

#[cfg(test)]
mod tests {
    use std::collections::HashSet;

    use super::*;

    #[test]
    fn it_works() {
        let trc = r#"{"from":"0x2c84747d93650a3d65f2a1586e0d7c6e5fce0dba","gas":"0x52d08","gasUsed":"0x2f9cf","to":"0x3a10dc1a145da500d5fba38b9ec49c8ff11a981f","input":"0x09c182c3000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000270642bd34ea3a1e327c325a14df39b274459e0000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000675dc61f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000fc40b76cdd4e62ef0c8273fdbdbc458253776015","calls":[{"from":"0x3a10dc1a145da500d5fba38b9ec49c8ff11a981f","gas":"0x49f84","gasUsed":"0x2d79c","to":"0xb47408ae708c1830d44480eea7a1cf598084f1ff","input":"0x09c182c3000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000270642bd34ea3a1e327c325a14df39b274459e0000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000675dc61f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000fc40b76cdd4e62ef0c8273fdbdbc458253776015","calls":[{"from":"0x3a10dc1a145da500d5fba38b9ec49c8ff11a981f","gas":"0x45a40","gasUsed":"0xa3c","to":"0xfc40b76cdd4e62ef0c8273fdbdbc458253776015","input":"0x70a082310000000000000000000000002c84747d93650a3d65f2a1586e0d7c6e5fce0dba","output":"0x0000000000000000000000000000000000000000000004936fb42eb3f550d743","type":"STATICCALL"},{"from":"0x3a10dc1a145da500d5fba38b9ec49c8ff11a981f","gas":"0x4297a","gasUsed":"0x5da6","to":"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","input":"0xd0e30db0","logs":[{"address":"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","topics":["0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c","0x0000000000000000000000003a10dc1a145da500d5fba38b9ec49c8ff11a981f"],"data":"0x000000000000000000000000000000000000000000000000015fb7f9b8c38000","position":"0x0"}],"value":"0x15fb7f9b8c38000","type":"CALL"},{"from":"0x3a10dc1a145da500d5fba38b9ec49c8ff11a981f","gas":"0x3ae74","gasUsed":"0x1f7e","to":"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","input":"0xa9059cbb00000000000000000000000088373dceada5e5e08ddcece6298ae2e9ad0239cd000000000000000000000000000000000000000000000000015fb7f9b8c38000","output":"0x0000000000000000000000000000000000000000000000000000000000000001","logs":[{"address":"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x0000000000000000000000003a10dc1a145da500d5fba38b9ec49c8ff11a981f","0x00000000000000000000000088373dceada5e5e08ddcece6298ae2e9ad0239cd"],"data":"0x000000000000000000000000000000000000000000000000015fb7f9b8c38000","position":"0x0"}],"value":"0x0","type":"CALL"},{"from":"0x3a10dc1a145da500d5fba38b9ec49c8ff11a981f","gas":"0x38cad","gasUsed":"0x26c","to":"0xfc40b76cdd4e62ef0c8273fdbdbc458253776015","input":"0x70a082310000000000000000000000002c84747d93650a3d65f2a1586e0d7c6e5fce0dba","output":"0x0000000000000000000000000000000000000000000004936fb42eb3f550d743","type":"STATICCALL"},{"from":"0x3a10dc1a145da500d5fba38b9ec49c8ff11a981f","gas":"0x376f0","gasUsed":"0x9c8","to":"0x88373dceada5e5e08ddcece6298ae2e9ad0239cd","input":"0x0902f1ac","output":"0x00000000000000000000000000000000000000000000000199e18adccc178f3100000000000000000000000000000000000000000004598e9d34006d11bf007100000000000000000000000000000000000000000000000000000000675dbf47","type":"STATICCALL"},{"from":"0x3a10dc1a145da500d5fba38b9ec49c8ff11a981f","gas":"0x36b80","gasUsed":"0x216","to":"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","input":"0x70a0823100000000000000000000000088373dceada5e5e08ddcece6298ae2e9ad0239cd","output":"0x0000000000000000000000000000000000000000000000019b4142d684db0f31","type":"STATICCALL"},{"from":"0x3a10dc1a145da500d5fba38b9ec49c8ff11a981f","gas":"0x35941","gasUsed":"0x14785","to":"0x88373dceada5e5e08ddcece6298ae2e9ad0239cd","input":"0x022c0d9f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003b580bcc49d60e40c4a0000000000000000000000002c84747d93650a3d65f2a1586e0d7c6e5fce0dba00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000","calls":[{"from":"0x88373dceada5e5e08ddcece6298ae2e9ad0239cd","gas":"0x321ed","gasUsed":"0xc8a8","to":"0xfc40b76cdd4e62ef0c8273fdbdbc458253776015","input":"0xa9059cbb0000000000000000000000002c84747d93650a3d65f2a1586e0d7c6e5fce0dba0000000000000000000000000000000000000000000003b580bcc49d60e40c4a","output":"0x0000000000000000000000000000000000000000000000000000000000000001","logs":[{"address":"0xfc40b76cdd4e62ef0c8273fdbdbc458253776015","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x00000000000000000000000088373dceada5e5e08ddcece6298ae2e9ad0239cd","0x000000000000000000000000fc40b76cdd4e62ef0c8273fdbdbc458253776015"],"data":"0x00000000000000000000000000000000000000000000002f79a309d4ab3e9a36","position":"0x0"},{"address":"0xfc40b76cdd4e62ef0c8273fdbdbc458253776015","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x00000000000000000000000088373dceada5e5e08ddcece6298ae2e9ad0239cd","0x0000000000000000000000002c84747d93650a3d65f2a1586e0d7c6e5fce0dba"],"data":"0x0000000000000000000000000000000000000000000003860719bac8b5a57214","position":"0x0"}],"value":"0x0","type":"CALL"},{"from":"0x88373dceada5e5e08ddcece6298ae2e9ad0239cd","gas":"0x25a0e","gasUsed":"0x216","to":"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","input":"0x70a0823100000000000000000000000088373dceada5e5e08ddcece6298ae2e9ad0239cd","output":"0x0000000000000000000000000000000000000000000000019b4142d684db0f31","type":"STATICCALL"},{"from":"0x88373dceada5e5e08ddcece6298ae2e9ad0239cd","gas":"0x2566b","gasUsed":"0x26c","to":"0xfc40b76cdd4e62ef0c8273fdbdbc458253776015","input":"0x70a0823100000000000000000000000088373dceada5e5e08ddcece6298ae2e9ad0239cd","output":"0x0000000000000000000000000000000000000000000455d91c773bcfb0daf427","type":"STATICCALL"}],"logs":[{"address":"0x88373dceada5e5e08ddcece6298ae2e9ad0239cd","topics":["0x1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1"],"data":"0x0000000000000000000000000000000000000000000000019b4142d684db0f310000000000000000000000000000000000000000000455d91c773bcfb0daf427","position":"0x3"},{"address":"0x88373dceada5e5e08ddcece6298ae2e9ad0239cd","topics":["0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822","0x0000000000000000000000003a10dc1a145da500d5fba38b9ec49c8ff11a981f","0x0000000000000000000000002c84747d93650a3d65f2a1586e0d7c6e5fce0dba"],"data":"0x000000000000000000000000000000000000000000000000015fb7f9b8c38000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003b580bcc49d60e40c4a","position":"0x3"}],"value":"0x0","type":"CALL"},{"from":"0x3a10dc1a145da500d5fba38b9ec49c8ff11a981f","gas":"0x214bb","gasUsed":"0x26c","to":"0xfc40b76cdd4e62ef0c8273fdbdbc458253776015","input":"0x70a082310000000000000000000000002c84747d93650a3d65f2a1586e0d7c6e5fce0dba","output":"0x00000000000000000000000000000000000000000000081976cde97caaf64957","type":"STATICCALL"},{"from":"0x3a10dc1a145da500d5fba38b9ec49c8ff11a981f","gas":"0x20fe3","gasUsed":"0x26c","to":"0xfc40b76cdd4e62ef0c8273fdbdbc458253776015","input":"0x70a082310000000000000000000000002c84747d93650a3d65f2a1586e0d7c6e5fce0dba","output":"0x00000000000000000000000000000000000000000000081976cde97caaf64957","type":"STATICCALL"},{"from":"0x3a10dc1a145da500d5fba38b9ec49c8ff11a981f","gas":"0x2054d","gasUsed":"0x216","to":"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","input":"0x70a082310000000000000000000000003a10dc1a145da500d5fba38b9ec49c8ff11a981f","output":"0x0000000000000000000000000000000000000000000000000000000000000000","type":"STATICCALL"},{"from":"0x3a10dc1a145da500d5fba38b9ec49c8ff11a981f","gas":"0x1d35b","gasUsed":"0x0","to":"0x270642bd34ea3a1e327c325a14df39b274459e00","input":"0x","value":"0xb5e620f48000","type":"CALL"}],"logs":[{"address":"0x3a10dc1a145da500d5fba38b9ec49c8ff11a981f","topics":["0x337b70af243e3976087dd0929c6e8560d0f87d28eda4d0b26203ffbe0dc8feb3"],"data":"0x0000000000000000000000002c84747d93650a3d65f2a1586e0d7c6e5fce0dba0000000000000000000000000000000000000000000003860719bac8b5a57214","position":"0x9"},{"address":"0x3a10dc1a145da500d5fba38b9ec49c8ff11a981f","topics":["0x24c07d9526daec95fb72ea7cecc4cfc860c60f857757a60e897a08c0cf534e08"],"data":"0x000000000000000000000000270642bd34ea3a1e327c325a14df39b274459e000000000000000000000000000000000000000000000000000000b5e620f48000","position":"0xb"},{"address":"0x3a10dc1a145da500d5fba38b9ec49c8ff11a981f","topics":["0x7bf178ffbe60d514bc776f4981560b01f88a33d43bef23be499093e646fb0f43"],"data":"0x0000000000000000000000002c84747d93650a3d65f2a1586e0d7c6e5fce0dba000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000016345785d8a0000","position":"0xb"},{"address":"0x3a10dc1a145da500d5fba38b9ec49c8ff11a981f","topics":["0x3310ea14266209db2516cc8eae3e55230d2376e02becfb8094363ad465b7794c"],"data":"0x0000000000000000000000002c84747d93650a3d65f2a1586e0d7c6e5fce0dba00000000000000000000000000000000000000000000000000038d7ea4c68000","position":"0xb"}],"value":"0x16345785d8a0000","type":"DELEGATECALL"}],"value":"0x16345785d8a0000","type":"CALL"}"#;
        let trace: CallFrame = serde_json::from_str(trc).unwrap();
        let selectors = get_selectors_for_trace(&trace);
        let selectorsSet: HashSet<String> = selectors.into_iter().collect();
        let selectors: Vec<String> = selectorsSet.into_iter().collect();
        println!("{:?}", selectors);
    }
}
